apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: init-cluster-1000
  region: eu-west-1
  version: "1.19"

nodeGroups:
  - name: ng-stateless-1001
    instanceType: t3.medium
    desiredCapacity: 3
    maxSize: 3
    minSize: 3
    privateNetworking: true
    ssh:
      allow: true # will use ~/.ssh/id_rsa.pub as the default ssh key
    iam:
      withAddonPolicies:
        imageBuilder: true
        autoScaler: true
  - name: ng-appmesh-1005
    instanceType: m5.large
    desiredCapacity: 0
    minSize: 0
    maxSize: 0
    iam:
      withAddonPolicies:
        albIngress: true
        appMesh: true
        xRay: true
        cloudWatch: true

vpc:
  cidr: 11.1.0.0/16
  #autoAllocateIPv6: true #This fails to delete
  # disable public access to endpoint and only allow private access
  clusterEndpoints:
    publicAccess: true
    privateAccess: true
  nat:
    gateway: HighlyAvailable # other options: Disable, Single (defaul

cloudWatch:
  clusterLogging:
    # enable specific types of cluster control plane logs
    enableTypes: ["audit", "authenticator", "controllerManager", "scheduler", "api"]
    # all supported types: "api", "audit", "authenticator", "controllerManager", "scheduler"
    # supported special values: "*" and "all"


# read more about IRSA here https://eksctl.io/usage/iamserviceaccounts/
iam:
  withOIDC: true
  serviceAccounts:
  # you need this appmesh-controller for IRSA in appmesh-controller helm deployment
  - metadata:
    name: appmesh-controller
    namespace: appmesh-system
    labels: {aws-usage: "appmesh"}
  attachPolicyARNs:
  - "arn:aws:iam::aws:policy/AWSCloudMapFullAccess"
  - "arn:aws:iam::aws:policy/AWSAppMeshFullAccess"
  - metadata:
      name: s3-reader
      # if no namespace is set, "default" will be used;
      # the namespace will be created if it doesn't exist already
      # namespace: backend-apps
      labels: {aws-usage: "application"}
    attachPolicyARNs:
    - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
    tags:
      Owner: "Kenichi Shibata"
      Team: "Security"
  - metadata:
      name: cluster-autoscaler
      namespace: kube-system
      labels: {aws-usage: "cluster-ops"}
    wellKnownPolicies:
      autoScaler: true
    roleName: eksctl-cluster-autoscaler-role
    roleOnly: true
